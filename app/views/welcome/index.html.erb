<% if logged_in? && has_reviews? %>
	<div class="search-input-container">
		<input id="search-input" class="controls" type="text" placeholder="Search Address">
	</div>
	<div class="map-reviews-container">
		<div id="search-map"></div>
		<div class="reviews-container">
			<div class="reviews-header">
				<h2>Rental Reviews</h2>
				<div class="underline"></div>
			</div>
			<div class="reviews-list"></div>
		</div>
	</div>
	<script>

		var map;
		var infowindow;
		var places;

		function initMap() {
	    	var melbourne = { lat: -37.8136, lng: 144.9631 };
	   		map = new google.maps.Map(document.querySelector('#search-map'), {
	        	center: melbourne,
	        	zoom: 15,
	        	gestureHandling: 'greedy'
	       	});

	   		// display all the markers in the suburb
	       	GetSuburbMarkers("Melbourne");

			var input = document.querySelector('#search-input');
			var searchBox = new google.maps.places.SearchBox(input);

			map.addListener('bounds_changed', function() {
				searchBox.setBounds(map.getBounds());
			});

			var markers = [];
			// Listen for the event fired when the user selects a prediction and retrieve
			// more details for that place.
			searchBox.addListener('places_changed', function() {
				places = searchBox.getPlaces();

				if (places.length == 0) {
					return;
				}

				// Clear out the old markers.
				markers.forEach(function(marker) {
					marker.setMap(null);
				});
				markers = [];

				// For each place, get the icon, name and location.
				var bounds = new google.maps.LatLngBounds();
				places.forEach(function(place) {
					if (!place.geometry) {
						console.log("Returned place contains no geometry");
						return;
					}
		            
					var icon = {
						url: place.icon,
						size: new google.maps.Size(71, 71),
						origin: new google.maps.Point(0, 0),
						anchor: new google.maps.Point(17, 34),
						scaledSize: new google.maps.Size(30, 30)
					};

					// Create a marker for each place.
					markers.push(new google.maps.Marker({
						map: map,
						icon: icon,
						title: place.name,
						position: place.geometry.location
					}));

					// moves the map to the new location
					if (place.geometry.viewport) {
						// Only geocodes have viewport.
						bounds.union(place.geometry.viewport);
					} else {
						bounds.extend(place.geometry.location);
					}


					// show info window on click, move map to center on click
					google.maps.event.addListener(markers[0], 'click', function() {
						infowindow = new google.maps.InfoWindow();
						infowindow.setContent(place.formatted_address);
						infowindow.open(map, this)
						map.setCenter(places[0].geometry.location);
						map.setZoom(18);
					})

					// find reviews for the searched rental
					FindReviews(place.formatted_address);
					// place the markers in the same suburb
					GetSuburbMarkers(place.vicinity);

				});

				map.fitBounds(bounds);
				map.setZoom(18);
				map.setCenter(places[0].geometry.location);

				// // get the places with a radius of 500 around the location
				// infowindow = new google.maps.InfoWindow();
				// var service = new google.maps.places.PlacesService(map);
				// service.nearbySearch({
				// 	location: places[0].geometry.location,
				// 	radius: 500,
				// 	type: ['store']
				// }, callback);

				// function callback(results, status) {
				// 	if (status === google.maps.places.PlacesServiceStatus.OK) {
				// 		for (var i = 0; i < results.length; i++) {
				// 			createMarker(results[i]);
				// 		}
				// 	}
				// }

				// function createMarker(place) {
				// 	var placeLoc = place.geometry.location;
				// 	var marker = new google.maps.Marker({
				// 		map: map,
				// 		position: place.geometry.location
				// 	});

				// 	google.maps.event.addListener(marker, 'click', function() {
				// 		infowindow.setContent(place.name);
				// 		infowindow.open(map, this);
				// 	});
	   //          } 
			})
		}

		function GetSuburbMarkers(suburb) {
			var options = {
				url: '/api/reviews/suburb',
				method: 'get',
				data: { suburb: suburb }
			}

			$.ajax(options)
			.done(function(response) {
				if (response && response.length > 0) {
					var smallHouse = "/assets/green-house-marker.png";
					response.forEach(function(review) {
						var latLng = new google.maps.LatLng({ lat: parseFloat(review.lat), lng: parseFloat(review.long) });
						var marker = new google.maps.Marker({
							map: map,
							position: latLng,
							icon: smallHouse
						})
						marker.addListener('click', function() {
							// if there is a infowindow open, close it
							if (infowindow) { infowindow.close() }
							FindReviews(review.address)
							infowindow = new google.maps.InfoWindow();
							// var address = "<a onclick='FindReviews($(this).text())'>" + review.address + "</a>"
							// infowindow.setContent(address);
							infowindow.setContent(review.address)
							infowindow.open(map, this);
						});
					})
				}
			})
		}

		function FindReviews(searchString) {
			// empty the container before adding new items to list
			$('.reviews-list').empty();

			var options = {
				url: '/api/reviews',
				method: 'get',
				data: { searchAddress: searchString }
			}

			$.ajax(options)
			.done(function(response) {
				if (response.length > 0) {
					response.forEach(function(review) {
						var reviewItem = 
						"<a href='/reviews/" + review.review_details.id + "'>\
							<div class='review'>\
								<div class='review-comment'>\
									<p>" + review.review_details.comment + "</p>\
								</div>\
								<div class='review-username'>\
									<p>Reviewed by: <span class='username'>" + review.username + "</span></p>\
								</div>\
							</div>\
						</a>"

						$('.reviews-list').append(reviewItem);
					})
					var createReview = 
								"<div class='create-review-button-container'>\
									<form action='/reviews/new/" + response[0].review_details.id + "' method='get'>\
										<button class='create-review-button'>Create New Review</button>\
									</form>\
								</div>"
					$('.reviews-list').append(createReview)
				} else {
					var searchInput = $('#search-input').val();
					var item = 
						"<div class='no-review-container'>\
							<p class='no-reviews-text'>\
								No Reviews for this Property\
							</p>\
							<form action='/reviews/new' method='post'>\
								<input type='hidden' name='authenticity_token' value='<%=form_authenticity_token%>'>\
								<input name='address' type='hidden' value='" + searchInput + "'>\
								<input name='suburb' type='hidden' value='" + places[0].vicinity + "'>\
								<input name='lat' type='hidden' value='" + places[0].geometry.location.lat() + "'>\
								<input name='long' type='hidden' value='" + places[0].geometry.location.lng() + "'>\
								<button class='create-review-button'>Create New Review</button>\
							</form>\
						</div>"
					$('.reviews-list').append(item);
				}
			})
		}

	</script>

	<script async defer
		src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7YBuHg-EpjHUU__6aBn14UDPLo86aeCc&libraries=places&callback=initMap"> // using the rentalscheckout@gmail.com API key
	</script>

<% elsif logged_in? %>

	<h1>Create a Review first to view the Map</h1>
	<form action="/reviews/new" method="get">
		<button>Create a Review</button>
	</form>

<% else %>
	<h1>Please Login First</h1>
	<a href="/login">Login Page</a>
<% end %>





